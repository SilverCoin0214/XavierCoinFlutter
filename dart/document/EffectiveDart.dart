void main(List<String> args) {}

// 代码风格

// 1. 大驼峰式: 每个单词首字母都大写
//  - Class 类名
//  - enums 枚举类型
//  - typedefs 类型定义
//  - type parameters 类型参数
//  - extension 扩展

// 2. 小驼峰式: 除了第一个单词首字母不大写,其他的首字母大写
//  - 类成员
//  - 顶级定义
//  - 变量
//  - 参数
//  - 等等等

// 3.下划线式:
//  - 库名
//  - package
//  - 文件夹
//  - 源文件

// 导入顺序

// 1. 要把 'dart:' 导入语句放在其他导入语句之前
// 2. 要把 'package:' 导入语句放在项目相关导入语句之前
// 3. 要把 export 语句作为一个单独的部分放到所有导入语句之后
// 4. 导入等级相同时, 按照字母顺序来排序每个部分的语句

// 格式化

// 1.避免单行超过80个字符
// 2.对所有流程控制使用 花括号
// 3.

// 注释

// 1. 用简洁易于理解的话来编写注释,
// 2. 使用 /// 文档注释来注释成员和类型
// 3. 为公开的API编写文档注释

// 库

// 1. 在 part of 中使用字符串
// 2. 不要导入 package 中 src目录下的库

// 空安全

// 1. 不要将变量初始化为 Null
// 2. 不要给默认参数赋值为 Null
// 3. 推荐使用 ?? 将 Null 转换为布尔值
// 4. 如果需要检查变量是否初始化, 避免使用 late 前缀

// 字符串

// 1. 使用相邻字符串的方式连接字面量字符串
// 2. 使用 $xxx 形式来组合字符串和值
// 3. 避免在字符串差值中使用不必要的大括号

// 集合

// 1. 尽量使用集合字面量
var points = <String>[];
var addresses = <String, Object>{};
var counts = <int>{};
// 2. 不要使用 .length 来判断一个集合是否为空
// 3. 避免在 Iterable.forEach() 中使用字面量函数
// 4. 使用 whereType()按类型过滤集合
// 5. 不要使用 cast()

// 函数

// 1. 使用函数声明的方式为函数绑定名称, 而不要使用 定义一个匿名函数然后赋值给变量

// 变量

// 1. 使用 final 关键字来创建只读属性
// 2. 不要使用 this., 在重定向命名函数和避免冲突的情况下除外.
// 3. 要尽可能在定义变量时使用初始化变量值

// 构造函数

// 1. 要尽可能使用初始化的形式
class Point {
  double x, y;
  Point(this.x, this.y);
}
// 2. 如果属性会被初始化, 不要使用 Late 前缀
// 3. 要用 ; 来替代空的构造函数体 {}
// 4. 不要使用 new
// 5. 不要冗余的使用 const



// 异步

// 1.推荐使用 async/await
