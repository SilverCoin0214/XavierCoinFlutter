/*
 * @Author: sce
 * @Date: 2021-09-01 22:38:01
 * @LastEditTime: 2021-09-02 14:57:34
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /XavierCoinFlutter/dart/document/nullSafe.dart
 */
void main(List<String> args) {}

// 空安全的原则

// 1. 默认不可空, 除非声明可以为空, 否则一定是非空类型.
// 2. 渐进式迁移
// 3. 完全可靠



// 类型系统中的可控性

// 1. 在类型设计中可以理解为 Null 相当于其他基本类型的子类, 但是就会导致, 基本类型所使用到的方法, 在 null 时报错.
// 2. dart修改了类型设计, 将 null 作为一个单独的类, 而其他类型设计里就不存在null的子类. 所以就存在两种类型设计.
// 3. 一种类型是 非空类型, 一种类型为 可空类型
// 4. 所以在概念上,  dart 的类型设计 顶层类型可以理解为 Object? , 而底层类型是一个 never.



// 未初始化的变量

// 1. 顶层变量和静态字段必须包含一个初始化方法, 因为能在任何位置被访问到, 所以必须确保编译前已经赋值, 所以初始化就必须赋值
// 2. 类实例的属性也必须在声明时包含初始化方法, 换句话说, 属性在构造体执行前被赋值就可以了.
// 3. 局部变量即使是非空变量也不一定需要一个初始化方法, 就是函数内的变量不一定需要初始化. 但使用前必须赋值
// 4. 可选参数必须具有默认值, 因为之前的可选默认为null, 现在非空的情况下就必须有其他默认值.



// 流程分析

// 1. dart存在 类型提升, 例如从 Object提升到 List, 在类型设计里相当于向下
// 2. dart对于局部变量来说, 只需要变量在每个使用路径都已经被赋值, 那么就可以被视为已经初始化.
// 3. 如果代码是动态正确的, 而静态分析时又是合理的, 那么就会进行类型提升.



// late

// late的作用是确保一个字段一定是非空的, 但是它会在之后才被初始化.
// late修饰符是在 运行时而非编译时对变量进行约束.
// late还可以延时初始化.
class Coffee {
  late final String _temperature;

  void heat() { _temperature = 'hot'; }
  void chill() { _temperature = 'iced'; }

  String serve() => _temperature + ' coffee';
}



/// 总结

// 1. 类型默认是非空的, 可以添加 ?变为可空
// 2. 可选参数必须是可空的或者包含默认值的.
// 3. 非空的全局变量和静态字段必须在声明时被初始化, 实例的非空字段必须在构造体开始执行前被初始化.
// 4. 如果接受者为 Null, 那么在其避空运算符之后的链式方法调用都会被截断.
// 5. ! 操作符可以将可空的操作对象转换为对应的非空类型
// 6. 新的 流程分析, 可以更安全的将 可空的局部变量和参数, 转变为可用的非空类型.
// 7. late 修饰符以在运行时每次都进行检查的高昂代价, 让代码在一些原本无法使用的地方, 能够使用非空类型的 final. 同时提供了对字段延迟初始化的支持
// 8. List类现在不再允许包含未初始化的元素.
